/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/key-labels/42.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                 // Thumb keys.

/ {
    combos {
        compatible = "zmk,combos";

        L1COMBO {
            bindings = <&to 1>;
            key-positions = <37 38>;
            layers = <0>;
            timeout-ms = <180>;
        };

        L2COMBO {
            bindings = <&to 2>;
            key-positions = <40 39>;
            timeout-ms = <180>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&gresc                     &kp Q               &kp W               &kp E               &kp R               &kp T        &kp Y                      &kp U              &kp I        &odash       &pequal          &kp ESC
&kp TAB                    &hml LCTRL A        &hml LALT S         &hml LGUI D         &hmShiftL LSHFT F   &kp G        &kp H                      &hmShiftR RSHFT J  &hmr RCMD K  &hmr RALT L  &hmr RCTRL SEMI  &kp BACKSPACE
&mt LS(LA(LC(LGUI))) CAPS  &longPress LG(Z) Z  &longPress LG(X) X  &longPress LG(C) C  &longPress LG(V) V  &kp B        &kp N                      &kp M              &kp COMMA    &kp DOT      &kp FSLH         &kp ENTER
                                                                   &autoLayerCb        &lt 1 BACKSPACE     &kp SPACE    &magic_thumb LEFT_SHIFT 0  &mo 2              &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bt BT_CLR     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2          &bt BT_SEL 3           &bt BT_SEL 4    &trans         &kp N7        &eightup      &kp KP_NUMBER_9  &kp DOT       &kp DELETE
&kp BACKSPACE  &kp KP_PLUS   &kp MINUS     &kp ASTRK             &hml LALT SLASH        &trans          &trans         &fourleft     &fivedown     &sixright        &kp PERIOD    &kp BACKSPACE
&trans         &trans        &trans        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans          &kp EQUAL      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp NUMBER_0  &kp RET
                                           &kp LCMD              &trans                 &kp SPACE       &kp RIGHT_ALT  &to 0         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL    &kp AT             &kp HASH         &kp DLLR       &kp PRCNT    &kp CARET  &kp AMPS           &kp ASTRK  &kp LPAR  &kp RPAR  &kp GRAVE
&kp LCTRL  &trans      &trans             &trans           &kp PAGE_UP    &kp INS      &kp MINUS  &kp SQT            &kp LBKT   &kp RBKT  &kp BSLH  &kp BACKSPACE
&kp LSHFT  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PAGE_DOWN  &kp HOME     &kp UNDER  &kp DOUBLE_QUOTES  &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                          &kp LGUI         &to 0          &kp SPACE    &kp RET    &trans             &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp ESC  &trans    &trans     &trans                &trans                 &trans       &trans     &kp N7  &kp N8  &kp N9  &kp DOT    &kp ESC
&trans   &kp PLUS  &kp MINUS  &kp STAR              &kp SLASH              &trans       &trans     &kp N4  &kp N5  &kp N6  &kp COMMA  &kp BSPC
&trans   &trans    &trans     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans       &trans     &kp N1  &kp N2  &kp N3  &kp N0     &trans
                              &trans                &trans                 &kp EQUAL    &kp EQUAL  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans      &altQMod   &altWMod   &kp LA(N3)  &altRMod   &altTMod     &kp LA(N6)  &kp LA(N7)  &altIMod  &altOMod  &trans  &trans
&altTabMod  &kp LA(A)  &kp LA(S)  &kp LA(D)   &altFMod   &kp LA(E)    &altHMod    &altJMod    &altKMod  &altLMod  &trans  &trans
&trans      &trans     &kp LA(Y)  &altCMod    &kp LA(P)  &trans       &trans      &trans      &trans    &trans    &trans  &trans
                                  &trans      &trans     &trans       &trans      &trans      &trans
            >;
        };
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
            hold-while-undecided;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
            hold-while-undecided;
        };

        odash: odash {
            compatible = "zmk,behavior-mod-morph";
            label = "ODASH";
            bindings = <&kp O>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        pequal: pequal {
            compatible = "zmk,behavior-mod-morph";
            label = "PEQUAL";
            bindings = <&kp P>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        eightup: eightup {
            compatible = "zmk,behavior-mod-morph";
            label = "EIGHTUP";
            bindings = <&kp N8>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        fivedown: fivedown {
            compatible = "zmk,behavior-mod-morph";
            label = "FIVEDOWN";
            bindings = <&kp NUMBER_5>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        fourleft: fourleft {
            compatible = "zmk,behavior-mod-morph";
            label = "FOURLEFT";
            bindings = <&kp NUMBER_4>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        sixright: sixright {
            compatible = "zmk,behavior-mod-morph";
            label = "SIXRIGHT";
            bindings = <&kp NUMBER_6>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };
    };
};

// Alt+Tab swapper

/ {
    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };
    };
};

/ {
    behaviors {
        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LA(A) LA(S) LA(D) LA(F) LS(LA(F)) LA(C) LS(LA(C)) LA(E) LA(Y) LA(P) LA(TAB) LS(LA(TAB)) LA(N1) LA(Q) LA(N2) LA(W) LA(N3) LA(N4) LS(LA(R)) LA(N5) LA(T) LA(N6) LA(N7) LA(N8) LA(I) LA(N9) LA(O) LA(H) LS(LA(H)) LA(J) LS(LA(J)) LA(K) LS(LA(K)) LA(L) LS(LA(L))>;
            ignore-modifiers;
        };
    };
};

/ {
    behaviors {
        tabdel: tabdel {
            compatible = "zmk,behavior-mod-morph";
            label = "TABDEL";
            bindings = <&kp TAB>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };

        hmShiftR: hmShiftR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSHIFTR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hmShiftL: hmShiftL {
            compatible = "zmk,behavior-hold-tap";
            label = "HMSHIFTL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        longPress: longPress {
            compatible = "zmk,behavior-hold-tap";
            label = "LONGPRESS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            flavor = "tap-preferred";
        };

        altTabMod: altTabMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTTABMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(TAB)>, <&kp LA(LS(TAB))>;

            tapping-term-ms = <280>;
        };

        altFMod: altFMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTFMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(F)>, <&kp LA(LS(F))>;

            tapping-term-ms = <280>;
        };

        altCMod: altCMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTCMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(C)>, <&kp LA(LS(C))>;

            tapping-term-ms = <280>;
        };

        altRMod: altRMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTRMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(N4)>, <&kp LA(LS(R))>;

            tapping-term-ms = <280>;
        };

        altTMod: altTMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTTMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(N5)>, <&kp LA(T)>;

            tapping-term-ms = <280>;
        };

        altIMod: altIMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTIMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(N8)>, <&kp LA(I)>;

            tapping-term-ms = <280>;
        };

        altOMod: altOMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTOMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(N9)>, <&kp LA(O)>;

            tapping-term-ms = <280>;
        };

        autoLayerCb: autoLayerCb {
            compatible = "zmk,behavior-tap-dance";
            label = "Auto-Layers Switch";
            #binding-cells = <0>;
            bindings = <&nav_word 4>, <&num_word 3>;

            tapping-term-ms = <280>;
        };

        altWMod: altWMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTWMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(NUMBER_2)>, <&kp LA(W)>;

            tapping-term-ms = <280>;
        };

        altQMod: altQMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTQMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(NUMBER_1)>, <&kp LA(Q)>;

            tapping-term-ms = <280>;
        };

        altHMod: altHMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTHMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(H)>, <&kp LA(LS(H))>;

            tapping-term-ms = <280>;
        };

        altJMod: altJMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTJMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(J)>, <&kp LA(LS(J))>;

            tapping-term-ms = <280>;
        };

        altKMod: altKMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTKMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(K)>, <&kp LA(LS(K))>;

            tapping-term-ms = <280>;
        };

        altLMod: altLMod {
            compatible = "zmk,behavior-tap-dance";
            label = "ALTLMOD";
            #binding-cells = <0>;
            bindings = <&kp LA(L)>, <&kp LA(LS(L))>;

            tapping-term-ms = <280>;
        };

        shift_repeat: shift_repeat {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>;

            repeat {
                trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
                bindings = <&key_repeat>;
                max-prior-idle-ms = <1200>;
                strict-modifiers;
            };
        };

        magic_thumb: magic_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_THUMB";
            bindings = <&kp>, <&shift_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-while-undecided;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };
    };
};
