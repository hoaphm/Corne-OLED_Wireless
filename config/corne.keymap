/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/key-labels/42.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.
#include <behaviors/num_word.dtsi>

/ {
    combos {
        compatible = "zmk,combos";

        L1COMBO {
            bindings = <&to 1>;
            key-positions = <37 38>;
            layers = <0>;
            timeout-ms = <180>;
        };

        L2COMBO {
            bindings = <&to 2>;
            key-positions = <40 39>;
            timeout-ms = <180>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&gresc                     &kp Q         &kp W        &kp E        &kp R            &kp T        &kp Y      &kp U         &kp I        &odash       &pequal          &kp ESC
&kp TAB                    &hml LCTRL A  &hml LALT S  &hml LGUI D  &hml LSHFT F     &kp G        &kp H      &hmr RSHFT J  &hmr RCMD K  &hmr RALT L  &hmr RCTRL SEMI  &kp BACKSPACE
&mt LS(LA(LC(LGUI))) CAPS  &kp Z         &kp X        &kp C        &kp V            &kp B        &kp N      &kp M         &kp COMMA    &kp DOT      &kp FSLH         &kp ENTER
                                                      &kp LGUI     &lt 1 BACKSPACE  &kp SPACE    &kp SPACE  &mo 2         &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&bt BT_CLR         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3          &bt BT_SEL 4             &trans         &kp N7        &eightup      &kp KP_NUMBER_9  &kp N0     &kp DELETE
&kp LA(BACKSPACE)  &trans        &kp PLUS      &kp KP_MINUS  &mt LALT ASTRK        &kp SLASH                &trans         &fourleft     &fivedown     &sixright        &kp DOT    &kp BACKSPACE
&swapper           &trans        &trans        &trans        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp EQUAL      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3     &kp COMMA  &kp RET
                                               &kp LCMD      &trans                &kp SPACE                &kp RIGHT_ALT  &to 0         &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL     &kp AT             &kp HASH         &kp DLLR       &kp PRCNT    &kp CARET  &kp AMPS           &kp ASTRK  &kp LPAR  &kp RPAR  &kp GRAVE
&kp LCTRL  &key_repeat  &kp C_BRI_DN       &kp C_BRI_UP     &kp PAGE_UP    &kp INS      &kp MINUS  &kp SQT            &kp LBKT   &kp RBKT  &kp BSLH  &kp BACKSPACE
&kp LSHFT  &kp K_MUTE   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PAGE_DOWN  &kp HOME     &kp UNDER  &kp DOUBLE_QUOTES  &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                           &kp LGUI         &to 0          &kp SPACE    &kp RET    &trans             &kp RALT
            >;
        };
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < KEYS_R THUMBS >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = < KEYS_L THUMBS >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        odash: odash {
            compatible = "zmk,behavior-mod-morph";
            label = "ODASH";
            bindings = <&kp O>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        pequal: pequal {
            compatible = "zmk,behavior-mod-morph";
            label = "PEQUAL";
            bindings = <&kp P>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        eightup: eightup {
            compatible = "zmk,behavior-mod-morph";
            label = "EIGHTUP";
            bindings = <&kp N8>, <&kp UP>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        fivedown: fivedown {
            compatible = "zmk,behavior-mod-morph";
            label = "FIVEDOWN";
            bindings = <&kp NUMBER_5>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        fourleft: fourleft {
            compatible = "zmk,behavior-mod-morph";
            label = "FOURLEFT";
            bindings = <&kp NUMBER_4>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };

        sixright: sixright {
            compatible = "zmk,behavior-mod-morph";
            label = "SIXRIGHT";
            bindings = <&kp NUMBER_6>, <&kp RIGHT>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RALT)>;
        };
    };
};

// Alt+Tab swapper

/ {
    behaviors {
        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
        };
    };
};

/ {
    behaviors {
        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>;
            ignore-modifiers;
        };
    };
};

/ {
    behaviors {
        tabdel: tabdel {
            compatible = "zmk,behavior-mod-morph";
            label = "TABDEL";
            bindings = <&kp TAB>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_LALT|MOD_LGUI|MOD_RCTL|MOD_RSFT|MOD_RALT|MOD_RGUI)>;
        };
    };
};
